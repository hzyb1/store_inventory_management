<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.UserMapper">

<!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型-->    
<!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 
            方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 -->    
<!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
<!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->
	
	
	
	<select id="selectByAccount" parameterType="java.lang.String" resultType="model.User">
		select * from user where Account=#{Account}
	</select>

	<select id="selectById" parameterType="int" resultType="model.User">
		select * from user where id=#{id}
	</select>
	<select id="selectByAll" resultType="model.User">
		select * from user where type=1
	</select>
	
	<update id="updateUser" parameterType="model.User">
		update user set account=#{account},password=#{password},name=#{name},
		sex=#{sex},phone=#{phone},place=#{place},state=#{state}
		where id = #{id}
	</update>
	<insert id="insertUser"  useGeneratedKeys="true" keyProperty="id">
		insert into user(account,password,name,phone,sex,place)
			 values(#{account},#{password},#{name},#{phone},#{sex},#{place})
	</insert>
	<delete id="deleteById" parameterType="int">
		delete from user where id=#{id}
	</delete>
</mapper>
